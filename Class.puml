@startuml Class

' ======= MODEL =======
package "Model" {
  class Car {
    +Id: Guid
    +Brand: string
    +Model: string
    +Description: string
    +EngineCapacity: float
    +EnginePower: int
    +EngineType: EngineTypes
    +PriceForOneDay: decimal
    +CompanyId: Guid
  }

  class Company {
    +Id: Guid
    +Name: string
    +PhoneNumber: string
    +Email: string
    +CarIds: List<Guid>
  }

  class Rent {
    +Id: Guid
    +UserId: Guid
    +CarId: Guid
    +CompanyId: Guid
    +StartRent: DateTime
    +EndRent: DateTime
  }

  class User {
    +Id: Guid
    +Name: string
    +Email: string
    +Password: string
    +Role: string
  }

  Car --> EngineTypes
  Car --> Company : CompanyId
  Company --> Car : CarIds
  Rent --> Car
  Rent --> Company
  Rent --> User
}

package "DTO"{
  class UserDto
  class CarDto
  class CompanyDto
  class RentDto

  UserDto --> User
  CarDto --> Car
  CompanyDto --> Company
  RentDto --> Rent

}
' ======= SERVICE =======
package "Service" {
  interface IUserService
  class UserService
  UserService ..|> IUserService

  interface ICarService
  class CarService
  CarService ..|> ICarService

  interface ICompanyService
  class CompanyService
  CompanyService ..|> ICompanyService

  interface IAuthService
  class AuthService
  AuthService ..|> IAuthService

  interface IJWTService
  class JWTService
  JWTService ..|> IJWTService

  interface IRentService
  class RentService
  RentService ..|> IRentService
}

' ======= CONTROLLER =======
package "Controller" {
  class UsersController
  class CarsController
  class CompaniesController
  class RentsController
  class AuthController
  class AdminsController

  UsersController --> IUserService
  CarsController --> ICarService
  CompaniesController --> ICompanyService
  RentsController --> IRentService
  AuthController --> IAuthService
}

' ======= PERSISTENCE =======
package "Persistence" {
  ' Базовый интерфейс без generic
  interface IRepository

  interface ICarRepository
  interface IUserRepository
  interface ICompanyRepository
  interface IRentRepository

  class CarRepository
  class UserRepository
  class CompanyRepository
  class RentRepository

  class AppDbContext
  class CarConfiguration
  class UserConfiguration
  class CompanyConfiguration
  class RentConfiguration

  ' Связи без <T>
  ICarRepository --|> IRepository
  IUserRepository --|> IRepository
  ICompanyRepository --|> IRepository
  IRentRepository --|> IRepository

  CarRepository ..|> ICarRepository
  UserRepository ..|> IUserRepository
  CompanyRepository ..|> ICompanyRepository
  RentRepository ..|> IRentRepository

  CarRepository --> AppDbContext
  UserRepository --> AppDbContext
  CompanyRepository --> AppDbContext
  RentRepository --> AppDbContext

  AppDbContext --> CarConfiguration
  AppDbContext --> UserConfiguration
  AppDbContext --> CompanyConfiguration
  AppDbContext --> RentConfiguration
}

' ======= СВЯЗИ между слоями =======
UserService --> IUserRepository
CarService --> ICarRepository
CompanyService --> ICompanyRepository
RentService --> IRentRepository

@enduml